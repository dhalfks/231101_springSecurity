package com.myweb.www.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/board/*")
public class BoardController {
	//폴더명 : board  / mapping : board
	//mapping => /board/register
	//목적지 => /board/register
	
	@Inject
	private BoardService bsv;
	
	@Inject
	private FileHandler fh;
	
	@GetMapping("/register")
	public void register() {
		log.info(">>> start >> ");
	}
	
	@PostMapping("/register")
	public String register(BoardVO bvo, RedirectAttributes re,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">>>>  bvo >> files >> "+ bvo + "  "+files);
		List<FileVO> flist = null;
		//file upload handler 생성
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}
		
		int isUp = bsv.insert(new BoardDTO(bvo, flist));
		re.addFlashAttribute("isUp", isUp);
		return "redirect:/board/list";
	}
	
	//paging 추가
	@GetMapping("/list")
	public void list(Model m, PagingVO pagingVO) {
		log.info(">>> pagingVO >>" + pagingVO);
		m.addAttribute("list", bsv.getList(pagingVO));
		//페이징 처리
		//총페이지 갯수 totalCount (검색포함)
		int totalCount = bsv.getTotalCount(pagingVO);
		PagingHandler ph = new PagingHandler(pagingVO, totalCount);
		m.addAttribute("ph", ph);
	}
	
	@GetMapping({"/detail","/modify"})
	public void detail(Model m, @RequestParam("bno")long bno) {
		m.addAttribute("bdto", bsv.getDetail(bno));
	}
	
	@PostMapping("/modify")
	public String modify(RedirectAttributes re, BoardVO bvo,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		int isOk = bsv.modify(bvo);
		re.addAttribute("bno", bvo.getBno());
		re.addFlashAttribute("isMod", isOk);
		return "redirect:/board/detail"; 
	}
	
	@GetMapping("/remove")
	public String remove(RedirectAttributes re, @RequestParam("bno")long bno) {
		int isDel = bsv.remove(bno);
		re.addFlashAttribute("isDel", isDel);
		return "redirect:/board/list";
	}
	
	@DeleteMapping(value="/file/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
		return bsv.removeFile(uuid) > 0? 
				new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
}
